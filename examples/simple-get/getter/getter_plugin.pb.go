//go:build tinygo.wasm

// Code generated by protoc-gen-go-plugin. DO NOT EDIT.
// versions:
// 	protoc-gen-go-plugin v0.7.0-dev
// 	protoc               v3.21.12
// source: examples/simple-get/getter/getter.proto

package getter

import (
	context "context"
	emptypb "github.com/knqyf263/go-plugin/types/known/emptypb"
	wasm "github.com/knqyf263/go-plugin/wasm"
	_ "unsafe"
)

const GetterPluginAPIVersion = 1

//export getter_api_version
func _getter_api_version() uint64 {
	return GetterPluginAPIVersion
}

var getter Getter

func RegisterGetter(p Getter) {
	getter = p
}

//export getter_get_config_map
func _getter_get_config_map(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(GetRequest)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := getter.GetConfigMap(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

type hostFunctions struct{}

func NewHostFunctions() HostFunctions {
	return hostFunctions{}
}

//go:wasm-module env
//export log
//go:linkname _log
func _log(ptr uint32, size uint32) uint64

func (h hostFunctions) Log(ctx context.Context, request *LogRequest) (*emptypb.Empty, error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return nil, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _log(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	response := new(emptypb.Empty)
	if err = response.UnmarshalVT(buf); err != nil {
		return nil, err
	}
	return response, nil
}
